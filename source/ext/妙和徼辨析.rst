.. Kenneth Lee 版权所有 2023

:Authors: Kenneth Lee
:Version: 0.1
:Date: 2023-02-11
:Status: Draft

妙和徼辨析
**********

这个小节深入探讨一下这个表述的深入含义：::

        故常无欲以观其妙。常有欲以观其徼。

因为有了后面一句“两者同出而异名”，所以最开始的时候我是把这里这个表述简单理解为
互文的。但深入应用以后，我发现这不是互文，这两者其实是有区别的。我不能说老子也
这么认为，因为没有其他校验，但现实就是这两者有区别。

我们定义一个名字，是为了从全集中区分一个观察对象。我们说猫，是为了区分狗，区分
猪，区分太阳月亮星星，区分高兴悲伤和恐惧……这些都不是“猫”。猫在这个上下文中，是
一个有。有是集合，一般来说可以穷举。无其实也是集合，但一般来说，你不能穷举。所
以它们是不同的。

这里要细纠一下这个“穷举“是什么意思了。我们这里说的不是一般意义的”穷举“（但我没
有更好的名字），不是说你可以对集合中每个元素点名，我们说的穷举是说，你知道集合
中每个元素的特征，并且可以基于这个特征来决定对它做出某种判断或者决策。

要较真一点说，我们当然也可以说无也有特征，只是这些特征都用“非”来表达而已。你可
以说猫有尾巴，所以猫的无就没有尾巴，这也是一个特征。但没有没有尾巴的东西是什么
样的？你没有足够的特征去考量它，因为“太阳”也是没有尾巴的，“高兴”也是没有尾巴的。
你很难完全想全这个无里面到底有多少元素。

所以，我们说“可以穷举”的本质就是我们具有那个对象“足够多”的特征。而我们没有“无”
足够多的信息，我们根本不知道那是什么。我们不知道怎么针对它来思考。

这里核心的原因就是：我们没有全集的全部信息。所以，虽然我们知道了“有”的分界界线，
我们都想象不到无里面有什么。所以，有是“缴”（边界），而无，是一个模糊的指代，只
是为了突出“有”的存在，所以“常无以观其妙”，无只是突出我们“有”一个“妙”（兴趣点）。

现在我们来看看这个理论的应用。

作为一个职业架构师，我经常被人要求“提供判断设计好坏的标准”。无论是用我的架构设
计的人希望通过这种方式来判断我的设计好不好，还是给我的设计做下一级的设计的人希
望用这个标准来约束自己的设计。

他们希望得到一个“有”，希望得到可以满足设计目标的所有条件，这样，只要符合这些条
件，他们的“设计就是正确的”。

我给不了这个东西，因为他们要求的就是设计本身。

设计是什么呢？无论是技术的设计还是其他工作的战略设计（比如规划公司发展路线，规
划人生发展方向），都是提供一组相对（相对所有细节）简单的属性，让目标可以达成。
让目标可以达成的方法有很多，我们选择一组属性，只是其中一个有，基于这个有的所有
属性，我们根据我们的经验来判断，这是可以达成的，我们就判断这是一个“好设计”。

剩下不符合这些属性的，都是“无”，对于“无”，我们既不知道它是不是“好设计”，也不知
道它是不是“坏设计”。“无”没有属性可以用作参考，因为它无法用来匹配我们的经验，而
人不过是“Pattern”（模式）的生物，除了匹配经验，它没有别的本事了。

所以，你要我给你一个“好设计”的“标准”，我就只能给你一个“设计”，而这个设计也仅仅
是其中一个“有”，我也证明不了其他的“有”不存在。

所以，我总能在你设计完了以后，根据我的经验判断一下，你这个是不是好设计，如果你
要我事前给你一个“标准”，我就给不出来了，我唯一能做的只是给你一个设计。

同样的，我们也能判断某个只设计了一些无关痛痒的属性的设计不是“好设计”，我们回答
不了你“难道我这个方法一定做不出来吗？”这样的问题，因为这仍然是一个无。

所以，很多人都寄望于无数的规章制度就能保证一个公司运作得很好，或者寄望于一个
Checklist就能把程序的质量保证到一定的程度。这也是幻想。因为这些东西针对达成的目
标不构成一个“有”，我们无法用这些条件来和我们的经验做参照，决定这个目标能否达成。

所以，如果你问：“Checklist有什么不对吗？”，它没有什么不对，但“认为Checklist能保
证目标一定程度上可以达成”，这是毫无道理的。这本身也是这个正确的判断。

这种情况下，只有把有无两个概念分清楚了，我们才能正确思考这个问题。“有无”确实“同
出而异名”，但两者的用法是不一样的。没人说孪生兄弟就得长一个样啊。
